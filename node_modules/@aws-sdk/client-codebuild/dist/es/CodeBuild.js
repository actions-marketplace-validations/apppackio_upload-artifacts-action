import { __extends } from "tslib";
import { CodeBuildClient } from "./CodeBuildClient";
import { BatchDeleteBuildsCommand, } from "./commands/BatchDeleteBuildsCommand";
import { BatchGetBuildBatchesCommand, } from "./commands/BatchGetBuildBatchesCommand";
import { BatchGetBuildsCommand, } from "./commands/BatchGetBuildsCommand";
import { BatchGetProjectsCommand, } from "./commands/BatchGetProjectsCommand";
import { BatchGetReportGroupsCommand, } from "./commands/BatchGetReportGroupsCommand";
import { BatchGetReportsCommand, } from "./commands/BatchGetReportsCommand";
import { CreateProjectCommand, } from "./commands/CreateProjectCommand";
import { CreateReportGroupCommand, } from "./commands/CreateReportGroupCommand";
import { CreateWebhookCommand, } from "./commands/CreateWebhookCommand";
import { DeleteBuildBatchCommand, } from "./commands/DeleteBuildBatchCommand";
import { DeleteProjectCommand, } from "./commands/DeleteProjectCommand";
import { DeleteReportCommand, } from "./commands/DeleteReportCommand";
import { DeleteReportGroupCommand, } from "./commands/DeleteReportGroupCommand";
import { DeleteResourcePolicyCommand, } from "./commands/DeleteResourcePolicyCommand";
import { DeleteSourceCredentialsCommand, } from "./commands/DeleteSourceCredentialsCommand";
import { DeleteWebhookCommand, } from "./commands/DeleteWebhookCommand";
import { DescribeCodeCoveragesCommand, } from "./commands/DescribeCodeCoveragesCommand";
import { DescribeTestCasesCommand, } from "./commands/DescribeTestCasesCommand";
import { GetReportGroupTrendCommand, } from "./commands/GetReportGroupTrendCommand";
import { GetResourcePolicyCommand, } from "./commands/GetResourcePolicyCommand";
import { ImportSourceCredentialsCommand, } from "./commands/ImportSourceCredentialsCommand";
import { InvalidateProjectCacheCommand, } from "./commands/InvalidateProjectCacheCommand";
import { ListBuildBatchesCommand, } from "./commands/ListBuildBatchesCommand";
import { ListBuildBatchesForProjectCommand, } from "./commands/ListBuildBatchesForProjectCommand";
import { ListBuildsCommand } from "./commands/ListBuildsCommand";
import { ListBuildsForProjectCommand, } from "./commands/ListBuildsForProjectCommand";
import { ListCuratedEnvironmentImagesCommand, } from "./commands/ListCuratedEnvironmentImagesCommand";
import { ListProjectsCommand, } from "./commands/ListProjectsCommand";
import { ListReportGroupsCommand, } from "./commands/ListReportGroupsCommand";
import { ListReportsCommand } from "./commands/ListReportsCommand";
import { ListReportsForReportGroupCommand, } from "./commands/ListReportsForReportGroupCommand";
import { ListSharedProjectsCommand, } from "./commands/ListSharedProjectsCommand";
import { ListSharedReportGroupsCommand, } from "./commands/ListSharedReportGroupsCommand";
import { ListSourceCredentialsCommand, } from "./commands/ListSourceCredentialsCommand";
import { PutResourcePolicyCommand, } from "./commands/PutResourcePolicyCommand";
import { RetryBuildBatchCommand, } from "./commands/RetryBuildBatchCommand";
import { RetryBuildCommand } from "./commands/RetryBuildCommand";
import { StartBuildBatchCommand, } from "./commands/StartBuildBatchCommand";
import { StartBuildCommand } from "./commands/StartBuildCommand";
import { StopBuildBatchCommand, } from "./commands/StopBuildBatchCommand";
import { StopBuildCommand } from "./commands/StopBuildCommand";
import { UpdateProjectCommand, } from "./commands/UpdateProjectCommand";
import { UpdateReportGroupCommand, } from "./commands/UpdateReportGroupCommand";
import { UpdateWebhookCommand, } from "./commands/UpdateWebhookCommand";
/**
 * <fullname>AWS CodeBuild</fullname>
 *         <p>AWS CodeBuild is a fully managed build service in the cloud. AWS CodeBuild compiles your source code,
 *             runs unit tests, and produces artifacts that are ready to deploy. AWS CodeBuild eliminates the
 *             need to provision, manage, and scale your own build servers. It provides prepackaged
 *             build environments for the most popular programming languages and build tools, such as
 *             Apache Maven, Gradle, and more. You can also fully customize build environments in AWS CodeBuild
 *             to use your own build tools. AWS CodeBuild scales automatically to meet peak build requests. You
 *             pay only for the build time you consume. For more information about AWS CodeBuild, see the <i>
 *                 <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html">AWS CodeBuild User
 *                     Guide</a>.</i>
 *          </p>
 *         <p>AWS CodeBuild supports these operations:</p>
 *         <ul>
 *             <li>
 *                 <p>
 *                   <code>BatchDeleteBuilds</code>: Deletes one or more builds.</p>
 *             </li>
 *             <li>
 *                 <p>
 *                   <code>BatchGetBuilds</code>: Gets information about one or more builds.</p>
 *             </li>
 *             <li>
 *                 <p>
 *                   <code>BatchGetProjects</code>: Gets information about one or more build
 *                     projects. A <i>build project</i> defines how AWS CodeBuild runs a build.
 *                     This includes information such as where to get the source code to build, the
 *                     build environment to use, the build commands to run, and where to store the
 *                     build output. A <i>build environment</i> is a representation of
 *                     operating system, programming language runtime, and tools that AWS CodeBuild uses to run
 *                     a build. You can add tags to build projects to help manage your resources and
 *                     costs.</p>
 *             </li>
 *             <li>
 *                 <p>
 *                     <code>BatchGetReportGroups</code>: Returns an array of report groups. </p>
 *             </li>
 *             <li>
 *                 <p>
 *                     <code>BatchGetReports</code>: Returns an array of reports. </p>
 *             </li>
 *             <li>
 *                 <p>
 *                   <code>CreateProject</code>: Creates a build project.</p>
 *             </li>
 *             <li>
 *                 <p>
 *                     <code>CreateReportGroup</code>: Creates a report group. A report group contains
 *                     a collection of reports. </p>
 *             </li>
 *             <li>
 *                 <p>
 *                   <code>CreateWebhook</code>: For an existing AWS CodeBuild build project that has its
 *                     source code stored in a GitHub or Bitbucket repository, enables AWS CodeBuild to start
 *                     rebuilding the source code every time a code change is pushed to the
 *                     repository.</p>
 *             </li>
 *             <li>
 *                 <p>
 *                   <code>DeleteProject</code>: Deletes a build project.</p>
 *             </li>
 *             <li>
 *                 <p>
 *                     <code>DeleteReport</code>: Deletes a report. </p>
 *             </li>
 *             <li>
 *                 <p>
 *                     <code>DeleteReportGroup</code>: Deletes a report group. </p>
 *             </li>
 *             <li>
 *                 <p>
 *                     <code>DeleteResourcePolicy</code>: Deletes a resource policy that is identified
 *                     by its resource ARN. </p>
 *             </li>
 *             <li>
 *                 <p>
 *                   <code>DeleteSourceCredentials</code>: Deletes a set of GitHub, GitHub
 *                     Enterprise, or Bitbucket source credentials.</p>
 *             </li>
 *             <li>
 *                 <p>
 *                   <code>DeleteWebhook</code>: For an existing AWS CodeBuild build project that has its
 *                     source code stored in a GitHub or Bitbucket repository, stops AWS CodeBuild from
 *                     rebuilding the source code every time a code change is pushed to the
 *                     repository.</p>
 *             </li>
 *             <li>
 *                 <p>
 *                     <code>DescribeTestCases</code>: Returns a list of details about test cases for a
 *                     report. </p>
 *             </li>
 *             <li>
 *                 <p>
 *                     <code>GetResourcePolicy</code>: Gets a resource policy that is identified by its
 *                     resource ARN. </p>
 *             </li>
 *             <li>
 *                 <p>
 *                   <code>ImportSourceCredentials</code>: Imports the source repository
 *                     credentials for an AWS CodeBuild project that has its source code stored in a
 *                     GitHub, GitHub Enterprise, or Bitbucket repository.</p>
 *             </li>
 *             <li>
 *                 <p>
 *                   <code>InvalidateProjectCache</code>: Resets the cache for a project.</p>
 *             </li>
 *             <li>
 *                 <p>
 *                   <code>ListBuilds</code>: Gets a list of build IDs, with each build ID
 *                     representing a single build.</p>
 *             </li>
 *             <li>
 *                 <p>
 *                   <code>ListBuildsForProject</code>: Gets a list of build IDs for the specified
 *                     build project, with each build ID representing a single build.</p>
 *             </li>
 *             <li>
 *                 <p>
 *                   <code>ListCuratedEnvironmentImages</code>: Gets information about Docker
 *                     images that are managed by AWS CodeBuild.</p>
 *             </li>
 *             <li>
 *                 <p>
 *                   <code>ListProjects</code>: Gets a list of build project names, with each build
 *                     project name representing a single build project.</p>
 *             </li>
 *             <li>
 *                 <p>
 *                     <code>ListReportGroups</code>: Gets a list ARNs for the report groups in the
 *                     current AWS account. </p>
 *             </li>
 *             <li>
 *                 <p>
 *                     <code>ListReports</code>: Gets a list ARNs for the reports in the current AWS
 *                     account. </p>
 *             </li>
 *             <li>
 *                 <p>
 *                     <code>ListReportsForReportGroup</code>: Returns a list of ARNs for the reports
 *                     that belong to a <code>ReportGroup</code>. </p>
 *             </li>
 *             <li>
 *                 <p>
 *                   <code>ListSharedProjects</code>: Gets a list of ARNs associated with projects
 *                     shared with the current AWS account or user.</p>
 *             </li>
 *             <li>
 *                 <p>
 *                   <code>ListSharedReportGroups</code>: Gets a list of ARNs associated with
 *                     report groups shared with the current AWS account or user</p>
 *             </li>
 *             <li>
 *                 <p>
 *                   <code>ListSourceCredentials</code>: Returns a list of
 *                         <code>SourceCredentialsInfo</code> objects. Each
 *                         <code>SourceCredentialsInfo</code> object includes the authentication type,
 *                     token ARN, and type of source provider for one set of credentials.</p>
 *             </li>
 *             <li>
 *                 <p>
 *                     <code>PutResourcePolicy</code>: Stores a resource policy for the ARN of a
 *                         <code>Project</code> or <code>ReportGroup</code> object. </p>
 *             </li>
 *             <li>
 *                 <p>
 *                   <code>StartBuild</code>: Starts running a build.</p>
 *             </li>
 *             <li>
 *                 <p>
 *                   <code>StopBuild</code>: Attempts to stop running a build.</p>
 *             </li>
 *             <li>
 *                 <p>
 *                   <code>UpdateProject</code>: Changes the settings of an existing build
 *                     project.</p>
 *             </li>
 *             <li>
 *                 <p>
 *                   <code>UpdateReportGroup</code>: Changes a report group.</p>
 *             </li>
 *             <li>
 *                 <p>
 *                   <code>UpdateWebhook</code>: Changes the settings of an existing
 *                     webhook.</p>
 *             </li>
 *          </ul>
 */
var CodeBuild = /** @class */ (function (_super) {
    __extends(CodeBuild, _super);
    function CodeBuild() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CodeBuild.prototype.batchDeleteBuilds = function (args, optionsOrCb, cb) {
        var command = new BatchDeleteBuildsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.batchGetBuildBatches = function (args, optionsOrCb, cb) {
        var command = new BatchGetBuildBatchesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.batchGetBuilds = function (args, optionsOrCb, cb) {
        var command = new BatchGetBuildsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.batchGetProjects = function (args, optionsOrCb, cb) {
        var command = new BatchGetProjectsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.batchGetReportGroups = function (args, optionsOrCb, cb) {
        var command = new BatchGetReportGroupsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.batchGetReports = function (args, optionsOrCb, cb) {
        var command = new BatchGetReportsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.createProject = function (args, optionsOrCb, cb) {
        var command = new CreateProjectCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.createReportGroup = function (args, optionsOrCb, cb) {
        var command = new CreateReportGroupCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.createWebhook = function (args, optionsOrCb, cb) {
        var command = new CreateWebhookCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.deleteBuildBatch = function (args, optionsOrCb, cb) {
        var command = new DeleteBuildBatchCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.deleteProject = function (args, optionsOrCb, cb) {
        var command = new DeleteProjectCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.deleteReport = function (args, optionsOrCb, cb) {
        var command = new DeleteReportCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.deleteReportGroup = function (args, optionsOrCb, cb) {
        var command = new DeleteReportGroupCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.deleteResourcePolicy = function (args, optionsOrCb, cb) {
        var command = new DeleteResourcePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.deleteSourceCredentials = function (args, optionsOrCb, cb) {
        var command = new DeleteSourceCredentialsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.deleteWebhook = function (args, optionsOrCb, cb) {
        var command = new DeleteWebhookCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.describeCodeCoverages = function (args, optionsOrCb, cb) {
        var command = new DescribeCodeCoveragesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.describeTestCases = function (args, optionsOrCb, cb) {
        var command = new DescribeTestCasesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.getReportGroupTrend = function (args, optionsOrCb, cb) {
        var command = new GetReportGroupTrendCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.getResourcePolicy = function (args, optionsOrCb, cb) {
        var command = new GetResourcePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.importSourceCredentials = function (args, optionsOrCb, cb) {
        var command = new ImportSourceCredentialsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.invalidateProjectCache = function (args, optionsOrCb, cb) {
        var command = new InvalidateProjectCacheCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.listBuildBatches = function (args, optionsOrCb, cb) {
        var command = new ListBuildBatchesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.listBuildBatchesForProject = function (args, optionsOrCb, cb) {
        var command = new ListBuildBatchesForProjectCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.listBuilds = function (args, optionsOrCb, cb) {
        var command = new ListBuildsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.listBuildsForProject = function (args, optionsOrCb, cb) {
        var command = new ListBuildsForProjectCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.listCuratedEnvironmentImages = function (args, optionsOrCb, cb) {
        var command = new ListCuratedEnvironmentImagesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.listProjects = function (args, optionsOrCb, cb) {
        var command = new ListProjectsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.listReportGroups = function (args, optionsOrCb, cb) {
        var command = new ListReportGroupsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.listReports = function (args, optionsOrCb, cb) {
        var command = new ListReportsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.listReportsForReportGroup = function (args, optionsOrCb, cb) {
        var command = new ListReportsForReportGroupCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.listSharedProjects = function (args, optionsOrCb, cb) {
        var command = new ListSharedProjectsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.listSharedReportGroups = function (args, optionsOrCb, cb) {
        var command = new ListSharedReportGroupsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.listSourceCredentials = function (args, optionsOrCb, cb) {
        var command = new ListSourceCredentialsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.putResourcePolicy = function (args, optionsOrCb, cb) {
        var command = new PutResourcePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.retryBuild = function (args, optionsOrCb, cb) {
        var command = new RetryBuildCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.retryBuildBatch = function (args, optionsOrCb, cb) {
        var command = new RetryBuildBatchCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.startBuild = function (args, optionsOrCb, cb) {
        var command = new StartBuildCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.startBuildBatch = function (args, optionsOrCb, cb) {
        var command = new StartBuildBatchCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.stopBuild = function (args, optionsOrCb, cb) {
        var command = new StopBuildCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.stopBuildBatch = function (args, optionsOrCb, cb) {
        var command = new StopBuildBatchCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.updateProject = function (args, optionsOrCb, cb) {
        var command = new UpdateProjectCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.updateReportGroup = function (args, optionsOrCb, cb) {
        var command = new UpdateReportGroupCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.updateWebhook = function (args, optionsOrCb, cb) {
        var command = new UpdateWebhookCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    return CodeBuild;
}(CodeBuildClient));
export { CodeBuild };
//# sourceMappingURL=CodeBuild.js.map