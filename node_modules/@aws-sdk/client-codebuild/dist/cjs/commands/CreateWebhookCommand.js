"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateWebhookCommand = void 0;
const models_0_1 = require("../models/models_0");
const Aws_json1_1_1 = require("../protocols/Aws_json1_1");
const middleware_serde_1 = require("@aws-sdk/middleware-serde");
const smithy_client_1 = require("@aws-sdk/smithy-client");
/**
 * <p>For an existing AWS CodeBuild build project that has its source code stored in a GitHub or
 *       Bitbucket repository, enables AWS CodeBuild to start rebuilding the source code every time a
 *       code change is pushed to the repository.</p>
 *          <important>
 *             <p>If you enable webhooks for an AWS CodeBuild project, and the project is used as a build
 *         step in AWS CodePipeline, then two identical builds are created for each commit. One build is
 *         triggered through webhooks, and one through AWS CodePipeline. Because billing is on a per-build
 *         basis, you are billed for both builds. Therefore, if you are using AWS CodePipeline, we
 *         recommend that you disable webhooks in AWS CodeBuild. In the AWS CodeBuild console, clear the
 *         Webhook box. For more information, see step 5 in <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/change-project.html#change-project-console">Change a Build Project's Settings</a>.</p>
 *          </important>
 */
class CreateWebhookCommand extends smithy_client_1.Command {
    // Start section: command_properties
    // End section: command_properties
    constructor(input) {
        // Start section: command_constructor
        super();
        this.input = input;
        // End section: command_constructor
    }
    /**
     * @internal
     */
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeBuildClient";
        const commandName = "CreateWebhookCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: models_0_1.CreateWebhookInput.filterSensitiveLog,
            outputFilterSensitiveLog: models_0_1.CreateWebhookOutput.filterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return Aws_json1_1_1.serializeAws_json1_1CreateWebhookCommand(input, context);
    }
    deserialize(output, context) {
        return Aws_json1_1_1.deserializeAws_json1_1CreateWebhookCommand(output, context);
    }
}
exports.CreateWebhookCommand = CreateWebhookCommand;
//# sourceMappingURL=CreateWebhookCommand.js.map